CCS PCM C Compiler, Version 5.015, 5967               17-Tem-21 15:26

               Filename:   C:\Users\User\Desktop\ccs cs\keyPad\keyPad.lst

               ROM used:   970 words (12%)
                           Largest free fragment is 2048
               RAM used:   22 (6%) at main() level
                           40 (11%) worst case
               Stack used: 6 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   385
0003:  NOP
.................... #include<16f877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  DATA 0C,00
0005:  DATA D3,34
0006:  DATA 66,39
0007:  DATA 65,10
0008:  DATA C4,37
0009:  DATA 67,39
000A:  DATA F5,10
000B:  DATA 21,00
000C:  DATA D3,34
000D:  DATA 66,39
000E:  DATA 65,10
000F:  DATA D9,30
0010:  DATA 6E,36
0011:  DATA E9,39
0012:  DATA A1,10
0013:  DATA 8A,25
0014:  DATA 61,36
0015:  DATA 61,37
0016:  DATA BA,12
0017:  DATA 64,00
0018:  DATA 0C,10
0019:  DATA A0,19
001A:  DATA A0,25
001B:  DATA 65,3D
001C:  DATA A0,2C
001D:  DATA 61,37
001E:  DATA EC,34
001F:  DATA 73,10
0020:  DATA 0A,10
0021:  DATA A0,19
0022:  DATA B0,29
0023:  DATA 6E,10
0024:  DATA E2,32
0025:  DATA 6B,36
0026:  DATA E5,10
0027:  DATA 21,00
0028:  DATA 8C,29
0029:  DATA 69,33
002A:  DATA F2,32
002B:  DATA F9,34
002C:  DATA A0,33
002D:  DATA 69,39
002E:  DATA ED,32
002F:  DATA 6B,05
0030:  DATA E9,31
0031:  DATA 69,37
0032:  DATA 20,15
0033:  DATA 20,31
0034:  DATA E1,39
0035:  DATA 69,37
0036:  DATA 69,3D
0037:  DATA 21,00
0038:  DATA 8C,29
0039:  DATA 69,33
003A:  DATA F2,32
003B:  DATA 3A,00
003C:  DATA 8C,29
003D:  DATA 69,33
003E:  DATA F2,32
003F:  DATA F9,34
0040:  DATA A0,33
0041:  DATA 69,39
0042:  DATA ED,32
0043:  DATA 6B,05
0044:  DATA E9,31
0045:  DATA 69,37
0046:  DATA 20,15
0047:  DATA 20,31
0048:  DATA E1,39
0049:  DATA 69,37
004A:  DATA 69,3D
004B:  DATA 21,00
*
012F:  MOVF   0B,W
0130:  MOVWF  32
0131:  BCF    0B.7
0132:  BSF    03.5
0133:  BSF    03.6
0134:  BSF    0C.7
0135:  BSF    0C.0
0136:  NOP
0137:  NOP
0138:  BCF    03.5
0139:  BCF    03.6
013A:  BTFSC  32.7
013B:  BSF    0B.7
013C:  BSF    03.6
013D:  MOVF   0C,W
013E:  ANDLW  7F
013F:  BTFSC  03.2
0140:  GOTO   183
0141:  BCF    03.6
0142:  MOVWF  32
0143:  BSF    03.6
0144:  MOVF   0D,W
0145:  BCF    03.6
0146:  MOVWF  33
0147:  BSF    03.6
0148:  MOVF   0F,W
0149:  BCF    03.6
014A:  MOVWF  34
014B:  MOVF   32,W
014C:  MOVWF  39
014D:  CALL   103
014E:  MOVF   33,W
014F:  BSF    03.6
0150:  MOVWF  0D
0151:  BCF    03.6
0152:  MOVF   34,W
0153:  BSF    03.6
0154:  MOVWF  0F
0155:  BCF    03.6
0156:  MOVF   0B,W
0157:  MOVWF  35
0158:  BCF    0B.7
0159:  BSF    03.5
015A:  BSF    03.6
015B:  BSF    0C.7
015C:  BSF    0C.0
015D:  NOP
015E:  NOP
015F:  BCF    03.5
0160:  BCF    03.6
0161:  BTFSC  35.7
0162:  BSF    0B.7
0163:  BSF    03.6
0164:  RLF    0C,W
0165:  RLF    0E,W
0166:  ANDLW  7F
0167:  BTFSC  03.2
0168:  GOTO   183
0169:  BCF    03.6
016A:  MOVWF  32
016B:  BSF    03.6
016C:  MOVF   0D,W
016D:  BCF    03.6
016E:  MOVWF  33
016F:  BSF    03.6
0170:  MOVF   0F,W
0171:  BCF    03.6
0172:  MOVWF  34
0173:  MOVF   32,W
0174:  MOVWF  39
0175:  CALL   103
0176:  MOVF   33,W
0177:  BSF    03.6
0178:  MOVWF  0D
0179:  BCF    03.6
017A:  MOVF   34,W
017B:  BSF    03.6
017C:  MOVWF  0F
017D:  INCF   0D,F
017E:  BTFSC  03.2
017F:  INCF   0F,F
0180:  BCF    03.6
0181:  GOTO   12F
0182:  BSF    03.6
0183:  BCF    03.6
0184:  RETURN
0185:  MOVF   3A,W
0186:  CLRF   78
0187:  SUBWF  39,W
0188:  BTFSC  03.0
0189:  GOTO   18D
018A:  MOVF   39,W
018B:  MOVWF  77
018C:  GOTO   199
018D:  CLRF   77
018E:  MOVLW  08
018F:  MOVWF  3B
0190:  RLF    39,F
0191:  RLF    77,F
0192:  MOVF   3A,W
0193:  SUBWF  77,W
0194:  BTFSC  03.0
0195:  MOVWF  77
0196:  RLF    78,F
0197:  DECFSZ 3B,F
0198:  GOTO   190
0199:  RETURN
*
02A9:  MOVF   0B,W
02AA:  MOVWF  34
02AB:  BCF    0B.7
02AC:  BSF    03.5
02AD:  BSF    03.6
02AE:  BSF    0C.7
02AF:  BSF    0C.0
02B0:  NOP
02B1:  NOP
02B2:  BCF    03.5
02B3:  BCF    03.6
02B4:  BTFSC  34.7
02B5:  BSF    0B.7
02B6:  BTFSC  03.0
02B7:  GOTO   2E0
02B8:  BSF    03.6
02B9:  MOVF   0C,W
02BA:  ANDLW  7F
02BB:  BCF    03.6
02BC:  MOVWF  34
02BD:  BSF    03.6
02BE:  MOVF   0D,W
02BF:  BCF    03.6
02C0:  MOVWF  35
02C1:  BSF    03.6
02C2:  MOVF   0F,W
02C3:  BCF    03.6
02C4:  MOVWF  36
02C5:  MOVF   34,W
02C6:  MOVWF  39
02C7:  CALL   103
02C8:  MOVF   35,W
02C9:  BSF    03.6
02CA:  MOVWF  0D
02CB:  BCF    03.6
02CC:  MOVF   36,W
02CD:  BSF    03.6
02CE:  MOVWF  0F
02CF:  BCF    03.6
02D0:  MOVF   0B,W
02D1:  MOVWF  37
02D2:  BCF    0B.7
02D3:  BSF    03.5
02D4:  BSF    03.6
02D5:  BSF    0C.7
02D6:  BSF    0C.0
02D7:  NOP
02D8:  NOP
02D9:  BCF    03.5
02DA:  BCF    03.6
02DB:  BTFSC  37.7
02DC:  BSF    0B.7
02DD:  DECFSZ 33,F
02DE:  GOTO   2E0
02DF:  GOTO   2FF
02E0:  BSF    03.6
02E1:  RLF    0C,W
02E2:  RLF    0E,W
02E3:  ANDLW  7F
02E4:  BCF    03.6
02E5:  MOVWF  34
02E6:  BSF    03.6
02E7:  MOVF   0D,W
02E8:  BCF    03.6
02E9:  MOVWF  35
02EA:  BSF    03.6
02EB:  MOVF   0F,W
02EC:  BCF    03.6
02ED:  MOVWF  36
02EE:  MOVF   34,W
02EF:  MOVWF  39
02F0:  CALL   103
02F1:  MOVF   35,W
02F2:  BSF    03.6
02F3:  MOVWF  0D
02F4:  BCF    03.6
02F5:  MOVF   36,W
02F6:  BSF    03.6
02F7:  MOVWF  0F
02F8:  INCF   0D,F
02F9:  BTFSC  03.2
02FA:  INCF   0F,F
02FB:  BCF    03.0
02FC:  BCF    03.6
02FD:  DECFSZ 33,F
02FE:  GOTO   2A9
*
0303:  MOVLW  20
0304:  BTFSS  34.4
0305:  MOVLW  30
0306:  MOVWF  35
0307:  MOVF   33,W
0308:  MOVWF  77
0309:  BTFSS  33.7
030A:  GOTO   313
030B:  COMF   77,F
030C:  INCF   77,F
030D:  MOVF   77,W
030E:  MOVWF  33
030F:  MOVLW  2D
0310:  MOVWF  35
0311:  BSF    34.7
0312:  BSF    34.0
0313:  MOVF   33,W
0314:  MOVWF  39
0315:  MOVLW  64
0316:  MOVWF  3A
0317:  CALL   185
0318:  MOVF   77,W
0319:  MOVWF  33
031A:  MOVLW  30
031B:  ADDWF  78,W
031C:  MOVWF  36
031D:  MOVF   33,W
031E:  MOVWF  39
031F:  MOVLW  0A
0320:  MOVWF  3A
0321:  CALL   185
0322:  MOVLW  30
0323:  ADDWF  77,W
0324:  MOVWF  38
0325:  MOVLW  30
0326:  ADDWF  78,W
0327:  MOVWF  37
0328:  MOVF   35,W
0329:  MOVWF  77
032A:  MOVLW  30
032B:  SUBWF  36,W
032C:  BTFSC  03.2
032D:  GOTO   332
032E:  BSF    34.1
032F:  BTFSC  34.7
0330:  BSF    34.2
0331:  GOTO   346
0332:  MOVF   35,W
0333:  MOVWF  36
0334:  MOVLW  20
0335:  MOVWF  35
0336:  MOVLW  30
0337:  SUBWF  37,W
0338:  BTFSC  03.2
0339:  GOTO   33E
033A:  BSF    34.0
033B:  BTFSC  34.7
033C:  BSF    34.1
033D:  GOTO   346
033E:  BTFSS  03.2
033F:  BSF    34.0
0340:  BTFSS  03.2
0341:  GOTO   346
0342:  MOVF   36,W
0343:  MOVWF  37
0344:  MOVLW  20
0345:  MOVWF  36
0346:  BTFSC  34.2
0347:  GOTO   34D
0348:  BTFSC  34.1
0349:  GOTO   350
034A:  BTFSC  34.0
034B:  GOTO   353
034C:  GOTO   356
034D:  MOVF   35,W
034E:  MOVWF  39
034F:  CALL   103
0350:  MOVF   36,W
0351:  MOVWF  39
0352:  CALL   103
0353:  MOVF   37,W
0354:  MOVWF  39
0355:  CALL   103
0356:  MOVF   38,W
0357:  MOVWF  39
0358:  CALL   103
....................  
.................... #list 
....................  
.................... #use delay(clock=4000000) 
*
004C:  MOVLW  3A
004D:  MOVWF  04
004E:  BCF    03.7
004F:  MOVF   00,W
0050:  BTFSC  03.2
0051:  GOTO   060
0052:  MOVLW  01
0053:  MOVWF  78
0054:  CLRF   77
0055:  DECFSZ 77,F
0056:  GOTO   055
0057:  DECFSZ 78,F
0058:  GOTO   054
0059:  MOVLW  4A
005A:  MOVWF  77
005B:  DECFSZ 77,F
005C:  GOTO   05B
005D:  GOTO   05E
005E:  DECFSZ 00,F
005F:  GOTO   052
0060:  RETURN
.................... #fuses XT,NOLVP,NOBROWNOUT,NOPROTECT,NODEBUG,NOWDT 
.................... #define use_portb_lcd TRUE 
.................... #include<lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0079:  MOVLW  0F
007A:  BSF    03.5
007B:  ANDWF  06,W
007C:  IORLW  F0
007D:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
007E:  BCF    03.5
007F:  BSF    06.2
....................    delay_cycles(1); 
0080:  NOP
....................    lcd_output_enable(1); 
0081:  BSF    06.0
....................    delay_cycles(1); 
0082:  NOP
....................    high = lcd_read_nibble(); 
0083:  CALL   06D
0084:  MOVF   78,W
0085:  MOVWF  41
....................        
....................    lcd_output_enable(0); 
0086:  BCF    06.0
....................    delay_cycles(1); 
0087:  NOP
....................    lcd_output_enable(1); 
0088:  BSF    06.0
....................    delay_us(1); 
0089:  NOP
....................    low = lcd_read_nibble(); 
008A:  CALL   06D
008B:  MOVF   78,W
008C:  MOVWF  40
....................        
....................    lcd_output_enable(0); 
008D:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
008E:  MOVLW  0F
008F:  BSF    03.5
0090:  ANDWF  06,W
0091:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0092:  BCF    03.5
0093:  SWAPF  41,W
0094:  MOVWF  77
0095:  MOVLW  F0
0096:  ANDWF  77,F
0097:  MOVF   77,W
0098:  IORWF  40,W
0099:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
006D:  MOVF   06,W
006E:  MOVWF  77
006F:  SWAPF  06,W
0070:  ANDLW  0F
0071:  MOVWF  78
....................   #endif 
0072:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0061:  SWAPF  41,W
0062:  ANDLW  F0
0063:  MOVWF  77
0064:  MOVLW  0F
0065:  ANDWF  06,W
0066:  IORWF  77,W
0067:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0068:  NOP
....................    lcd_output_enable(1); 
0069:  BSF    06.0
....................    delay_us(2); 
006A:  GOTO   06B
....................    lcd_output_enable(0); 
006B:  BCF    06.0
006C:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0073:  BSF    03.5
0074:  BCF    06.0
....................    lcd_rs_tris(); 
0075:  BCF    06.1
....................    lcd_rw_tris(); 
0076:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0077:  BCF    03.5
0078:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
009A:  MOVF   78,W
009B:  MOVWF  40
009C:  BTFSC  40.7
009D:  GOTO   079
....................    lcd_output_rs(address); 
009E:  BTFSS  3E.0
009F:  BCF    06.1
00A0:  BTFSC  3E.0
00A1:  BSF    06.1
....................    delay_cycles(1); 
00A2:  NOP
....................    lcd_output_rw(0); 
00A3:  BCF    06.2
....................    delay_cycles(1); 
00A4:  NOP
....................    lcd_output_enable(0); 
00A5:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
00A6:  SWAPF  3F,W
00A7:  MOVWF  40
00A8:  MOVLW  0F
00A9:  ANDWF  40,F
00AA:  MOVF   40,W
00AB:  MOVWF  41
00AC:  CALL   061
....................    lcd_send_nibble(n & 0xf); 
00AD:  MOVF   3F,W
00AE:  ANDLW  0F
00AF:  MOVWF  40
00B0:  MOVWF  41
00B1:  CALL   061
00B2:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00B3:  MOVLW  28
00B4:  MOVWF  32
00B5:  MOVLW  0C
00B6:  MOVWF  33
00B7:  MOVLW  01
00B8:  MOVWF  34
00B9:  MOVLW  06
00BA:  MOVWF  35
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00BB:  BCF    06.0
....................    lcd_output_rs(0); 
00BC:  BCF    06.1
....................    lcd_output_rw(0); 
00BD:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00BE:  MOVLW  0F
00BF:  BSF    03.5
00C0:  ANDWF  06,W
00C1:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
00C2:  BCF    06.0
....................    lcd_rs_tris(); 
00C3:  BCF    06.1
....................    lcd_rw_tris(); 
00C4:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
00C5:  MOVLW  0F
00C6:  BCF    03.5
00C7:  MOVWF  3A
00C8:  CALL   04C
....................    for(i=1;i<=3;++i) 
00C9:  MOVLW  01
00CA:  MOVWF  31
00CB:  MOVF   31,W
00CC:  SUBLW  03
00CD:  BTFSS  03.0
00CE:  GOTO   0D7
....................    { 
....................        lcd_send_nibble(3); 
00CF:  MOVLW  03
00D0:  MOVWF  41
00D1:  CALL   061
....................        delay_ms(5); 
00D2:  MOVLW  05
00D3:  MOVWF  3A
00D4:  CALL   04C
00D5:  INCF   31,F
00D6:  GOTO   0CB
....................    } 
....................     
....................    lcd_send_nibble(2); 
00D7:  MOVLW  02
00D8:  MOVWF  41
00D9:  CALL   061
....................    delay_ms(5); 
00DA:  MOVLW  05
00DB:  MOVWF  3A
00DC:  CALL   04C
....................    for(i=0;i<=3;++i) 
00DD:  CLRF   31
00DE:  MOVF   31,W
00DF:  SUBLW  03
00E0:  BTFSS  03.0
00E1:  GOTO   0EE
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00E2:  MOVLW  32
00E3:  ADDWF  31,W
00E4:  MOVWF  04
00E5:  BCF    03.7
00E6:  MOVF   00,W
00E7:  MOVWF  36
00E8:  CLRF   3E
00E9:  MOVF   36,W
00EA:  MOVWF  3F
00EB:  CALL   073
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00EC:  INCF   31,F
00ED:  GOTO   0DE
00EE:  BCF    0A.3
00EF:  BCF    0A.4
00F0:  GOTO   3C0 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00F1:  DECFSZ 3B,W
00F2:  GOTO   0F4
00F3:  GOTO   0F7
....................       address=LCD_LINE_TWO; 
00F4:  MOVLW  40
00F5:  MOVWF  3C
00F6:  GOTO   0F8
....................    else 
....................       address=0; 
00F7:  CLRF   3C
....................       
....................    address+=x-1; 
00F8:  MOVLW  01
00F9:  SUBWF  3A,W
00FA:  ADDWF  3C,F
....................    lcd_send_byte(0,0x80|address); 
00FB:  MOVF   3C,W
00FC:  IORLW  80
00FD:  MOVWF  3D
00FE:  CLRF   3E
00FF:  MOVF   3D,W
0100:  MOVWF  3F
0101:  CALL   073
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0102:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0103:  MOVF   39,W
0104:  XORLW  07
0105:  BTFSC  03.2
0106:  GOTO   111
0107:  XORLW  0B
0108:  BTFSC  03.2
0109:  GOTO   116
010A:  XORLW  06
010B:  BTFSC  03.2
010C:  GOTO   11E
010D:  XORLW  02
010E:  BTFSC  03.2
010F:  GOTO   124
0110:  GOTO   129
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0111:  MOVLW  01
0112:  MOVWF  3A
0113:  MOVWF  3B
0114:  CALL   0F1
0115:  GOTO   12E
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0116:  CLRF   3E
0117:  MOVLW  01
0118:  MOVWF  3F
0119:  CALL   073
....................                      delay_ms(2); 
011A:  MOVLW  02
011B:  MOVWF  3A
011C:  CALL   04C
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
011D:  GOTO   12E
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
011E:  MOVLW  01
011F:  MOVWF  3A
0120:  MOVLW  02
0121:  MOVWF  3B
0122:  CALL   0F1
0123:  GOTO   12E
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0124:  CLRF   3E
0125:  MOVLW  10
0126:  MOVWF  3F
0127:  CALL   073
0128:  GOTO   12E
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0129:  MOVLW  01
012A:  MOVWF  3E
012B:  MOVF   39,W
012C:  MOVWF  3F
012D:  CALL   073
....................      #endif 
....................    } 
012E:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #use fast_io(d) 
.................... #use fast_io(c) 
....................  
.................... int girilen[7]={1,1,1,1,1,1}; 
*
0391:  MOVLW  01
0392:  BCF    03.5
0393:  MOVWF  20
0394:  MOVWF  21
0395:  MOVWF  22
0396:  MOVWF  23
0397:  MOVWF  24
0398:  MOVWF  25
0399:  CLRF   26
.................... int sifre[7]={1,7,8,5,0,9}; 
039A:  MOVWF  27
039B:  MOVLW  07
039C:  MOVWF  28
039D:  MOVLW  08
039E:  MOVWF  29
039F:  MOVLW  05
03A0:  MOVWF  2A
03A1:  CLRF   2B
03A2:  MOVLW  09
03A3:  MOVWF  2C
03A4:  CLRF   2D
.................... int sayac=0; 
.................... int dogruluk=0; 
.................... int yanlis=0; 
....................  
.................... void tusKontrol(); 
....................  
.................... void sorgu() 
.................... { 
....................  lcd_putc("\f"); 
*
0269:  MOVLW  04
026A:  BSF    03.6
026B:  MOVWF  0D
026C:  MOVLW  00
026D:  MOVWF  0F
026E:  BCF    03.6
026F:  CALL   12F
....................   for(int i=0;i<6;i++) 
0270:  CLRF   31
0271:  MOVF   31,W
0272:  SUBLW  05
0273:  BTFSS  03.0
0274:  GOTO   286
....................   { 
....................      if(sifre[i]==girilen[i+1]) 
0275:  MOVLW  27
0276:  ADDWF  31,W
0277:  MOVWF  04
0278:  BCF    03.7
0279:  MOVF   00,W
027A:  MOVWF  32
027B:  MOVLW  01
027C:  ADDWF  31,W
027D:  ADDLW  20
027E:  MOVWF  04
027F:  BCF    03.7
0280:  MOVF   00,W
0281:  SUBWF  32,W
0282:  BTFSC  03.2
....................      { 
....................         dogruluk++; 
0283:  INCF   2F,F
....................      } 
0284:  INCF   31,F
0285:  GOTO   271
....................   } 
....................   if(dogruluk==6){ printf(lcd_putc,"Sifre Dogru!!");output_high(pin_c1);delay_ms(1000); output_low(pin_c1); dogruluk=0;  yanlis=0;} 
0286:  MOVF   2F,W
0287:  SUBLW  06
0288:  BTFSS  03.2
0289:  GOTO   29D
028A:  MOVLW  05
028B:  BSF    03.6
028C:  MOVWF  0D
028D:  MOVLW  00
028E:  MOVWF  0F
028F:  BCF    03.6
0290:  CALL   12F
0291:  BSF    07.1
0292:  MOVLW  04
0293:  MOVWF  32
0294:  MOVLW  FA
0295:  MOVWF  3A
0296:  CALL   04C
0297:  DECFSZ 32,F
0298:  GOTO   294
0299:  BCF    07.1
029A:  CLRF   2F
029B:  CLRF   30
029C:  GOTO   377
....................   else{ printf(lcd_putc,"Sifre Yanlis!!\nKalan:%d",2-yanlis); output_high(pin_c0);delay_ms(1000); output_low(pin_c0);dogruluk=0; yanlis++;if(yanlis==3){ 
029D:  MOVF   30,W
029E:  SUBLW  02
029F:  MOVWF  32
02A0:  MOVLW  0C
02A1:  BSF    03.6
02A2:  MOVWF  0D
02A3:  MOVLW  00
02A4:  MOVWF  0F
02A5:  BCF    03.0
02A6:  MOVLW  15
02A7:  BCF    03.6
02A8:  MOVWF  33
*
02FF:  MOVF   32,W
0300:  MOVWF  33
0301:  MOVLW  18
0302:  MOVWF  34
*
0359:  BSF    07.0
035A:  MOVLW  04
035B:  MOVWF  32
035C:  MOVLW  FA
035D:  MOVWF  3A
035E:  CALL   04C
035F:  DECFSZ 32,F
0360:  GOTO   35C
0361:  BCF    07.0
0362:  CLRF   2F
0363:  INCF   30,F
0364:  MOVF   30,W
0365:  SUBLW  03
0366:  BTFSS  03.2
0367:  GOTO   377
....................   printf(lcd_putc,"\f  3 Kez Yanlis \n  30Sn bekle!!");yanlis=0;delay_ms(30000);}} 
0368:  MOVLW  18
0369:  BSF    03.6
036A:  MOVWF  0D
036B:  MOVLW  00
036C:  MOVWF  0F
036D:  BCF    03.6
036E:  CALL   12F
036F:  CLRF   30
0370:  MOVLW  78
0371:  MOVWF  32
0372:  MOVLW  FA
0373:  MOVWF  3A
0374:  CALL   04C
0375:  DECFSZ 32,F
0376:  GOTO   372
....................   sayac=0; 
0377:  CLRF   2E
....................   lcd_putc("\fSifreyi girmek\nicin * basiniz!"); 
0378:  MOVLW  28
0379:  BSF    03.6
037A:  MOVWF  0D
037B:  MOVLW  00
037C:  MOVWF  0F
037D:  BCF    03.6
037E:  CALL   12F
....................  
.................... } 
....................  
.................... void tusKontrol() 
.................... { 
....................    
....................   output_high(pin_d3); 
*
019A:  BSF    08.3
....................   if(input(pin_d4)) 
019B:  BTFSS  08.4
019C:  GOTO   381
....................   {  
....................      sayac++; 
019D:  INCF   2E,F
....................      delay_ms(120); 
019E:  MOVLW  78
019F:  MOVWF  3A
01A0:  CALL   04C
....................      output_low(pin_d3); 
01A1:  BCF    08.3
....................      printf(lcd_putc,"\fSifre:"); 
01A2:  MOVLW  38
01A3:  BSF    03.6
01A4:  MOVWF  0D
01A5:  MOVLW  00
01A6:  MOVWF  0F
01A7:  BCF    03.6
01A8:  CALL   12F
....................      while(sayac<8 && sayac>=1) 
01A9:  MOVF   2E,W
01AA:  SUBLW  07
01AB:  BTFSS  03.0
01AC:  GOTO   381
01AD:  MOVF   2E,W
01AE:  SUBLW  00
01AF:  BTFSC  03.0
01B0:  GOTO   381
....................      { 
....................         output_high(pin_d0); 
01B1:  BSF    08.0
....................         if(input(pin_d4)){delay_ms(20); girilen[sayac]=1; printf(lcd_putc,"*"); sayac++;  while(input(pin_d4));} 
01B2:  BTFSS  08.4
01B3:  GOTO   1C3
01B4:  MOVLW  14
01B5:  MOVWF  3A
01B6:  CALL   04C
01B7:  MOVLW  20
01B8:  ADDWF  2E,W
01B9:  MOVWF  04
01BA:  BCF    03.7
01BB:  MOVLW  01
01BC:  MOVWF  00
01BD:  MOVLW  2A
01BE:  MOVWF  39
01BF:  CALL   103
01C0:  INCF   2E,F
01C1:  BTFSC  08.4
01C2:  GOTO   1C1
....................         if(input(pin_d5)){delay_ms(20); girilen[sayac]=2; printf(lcd_putc,"*"); sayac++;  while(input(pin_d5));} 
01C3:  BTFSS  08.5
01C4:  GOTO   1D4
01C5:  MOVLW  14
01C6:  MOVWF  3A
01C7:  CALL   04C
01C8:  MOVLW  20
01C9:  ADDWF  2E,W
01CA:  MOVWF  04
01CB:  BCF    03.7
01CC:  MOVLW  02
01CD:  MOVWF  00
01CE:  MOVLW  2A
01CF:  MOVWF  39
01D0:  CALL   103
01D1:  INCF   2E,F
01D2:  BTFSC  08.5
01D3:  GOTO   1D2
....................         if(input(pin_d6)){delay_ms(20); girilen[sayac]=3; printf(lcd_putc,"*"); sayac++;  while(input(pin_d6));} 
01D4:  BTFSS  08.6
01D5:  GOTO   1E5
01D6:  MOVLW  14
01D7:  MOVWF  3A
01D8:  CALL   04C
01D9:  MOVLW  20
01DA:  ADDWF  2E,W
01DB:  MOVWF  04
01DC:  BCF    03.7
01DD:  MOVLW  03
01DE:  MOVWF  00
01DF:  MOVLW  2A
01E0:  MOVWF  39
01E1:  CALL   103
01E2:  INCF   2E,F
01E3:  BTFSC  08.6
01E4:  GOTO   1E3
....................         output_low(pin_d0); 
01E5:  BCF    08.0
....................    
....................    
....................         output_high(pin_d1); 
01E6:  BSF    08.1
....................         if(input(pin_d4)){delay_ms(20); girilen[sayac]=4; printf(lcd_putc,"*"); sayac++; while(input(pin_d4));} 
01E7:  BTFSS  08.4
01E8:  GOTO   1F8
01E9:  MOVLW  14
01EA:  MOVWF  3A
01EB:  CALL   04C
01EC:  MOVLW  20
01ED:  ADDWF  2E,W
01EE:  MOVWF  04
01EF:  BCF    03.7
01F0:  MOVLW  04
01F1:  MOVWF  00
01F2:  MOVLW  2A
01F3:  MOVWF  39
01F4:  CALL   103
01F5:  INCF   2E,F
01F6:  BTFSC  08.4
01F7:  GOTO   1F6
....................         if(input(pin_d5)){delay_ms(20); girilen[sayac]=5; printf(lcd_putc,"*"); sayac++; while(input(pin_d5));} 
01F8:  BTFSS  08.5
01F9:  GOTO   209
01FA:  MOVLW  14
01FB:  MOVWF  3A
01FC:  CALL   04C
01FD:  MOVLW  20
01FE:  ADDWF  2E,W
01FF:  MOVWF  04
0200:  BCF    03.7
0201:  MOVLW  05
0202:  MOVWF  00
0203:  MOVLW  2A
0204:  MOVWF  39
0205:  CALL   103
0206:  INCF   2E,F
0207:  BTFSC  08.5
0208:  GOTO   207
....................         if(input(pin_d6)){delay_ms(20); girilen[sayac]=6; printf(lcd_putc,"*"); sayac++; while(input(pin_d6));} 
0209:  BTFSS  08.6
020A:  GOTO   21A
020B:  MOVLW  14
020C:  MOVWF  3A
020D:  CALL   04C
020E:  MOVLW  20
020F:  ADDWF  2E,W
0210:  MOVWF  04
0211:  BCF    03.7
0212:  MOVLW  06
0213:  MOVWF  00
0214:  MOVLW  2A
0215:  MOVWF  39
0216:  CALL   103
0217:  INCF   2E,F
0218:  BTFSC  08.6
0219:  GOTO   218
....................         output_low(pin_d1); 
021A:  BCF    08.1
....................    
....................         output_high(pin_d2); 
021B:  BSF    08.2
....................         if(input(pin_d4)){delay_ms(20); girilen[sayac]=7; printf(lcd_putc,"*"); sayac++; while(input(pin_d4));} 
021C:  BTFSS  08.4
021D:  GOTO   22D
021E:  MOVLW  14
021F:  MOVWF  3A
0220:  CALL   04C
0221:  MOVLW  20
0222:  ADDWF  2E,W
0223:  MOVWF  04
0224:  BCF    03.7
0225:  MOVLW  07
0226:  MOVWF  00
0227:  MOVLW  2A
0228:  MOVWF  39
0229:  CALL   103
022A:  INCF   2E,F
022B:  BTFSC  08.4
022C:  GOTO   22B
....................         if(input(pin_d5)){delay_ms(20); girilen[sayac]=8; printf(lcd_putc,"*"); sayac++; while(input(pin_d5));} 
022D:  BTFSS  08.5
022E:  GOTO   23E
022F:  MOVLW  14
0230:  MOVWF  3A
0231:  CALL   04C
0232:  MOVLW  20
0233:  ADDWF  2E,W
0234:  MOVWF  04
0235:  BCF    03.7
0236:  MOVLW  08
0237:  MOVWF  00
0238:  MOVLW  2A
0239:  MOVWF  39
023A:  CALL   103
023B:  INCF   2E,F
023C:  BTFSC  08.5
023D:  GOTO   23C
....................         if(input(pin_d6)){delay_ms(20); girilen[sayac]=9; printf(lcd_putc,"*"); sayac++; while(input(pin_d6));} 
023E:  BTFSS  08.6
023F:  GOTO   24F
0240:  MOVLW  14
0241:  MOVWF  3A
0242:  CALL   04C
0243:  MOVLW  20
0244:  ADDWF  2E,W
0245:  MOVWF  04
0246:  BCF    03.7
0247:  MOVLW  09
0248:  MOVWF  00
0249:  MOVLW  2A
024A:  MOVWF  39
024B:  CALL   103
024C:  INCF   2E,F
024D:  BTFSC  08.6
024E:  GOTO   24D
....................         output_low(pin_d2); 
024F:  BCF    08.2
....................    
....................         output_high(pin_d3); 
0250:  BSF    08.3
....................         if(input(pin_d5)){delay_ms(20); girilen[sayac]=0; printf(lcd_putc,"*"); sayac++; while(input(pin_d5));} 
0251:  BTFSS  08.5
0252:  GOTO   261
0253:  MOVLW  14
0254:  MOVWF  3A
0255:  CALL   04C
0256:  MOVLW  20
0257:  ADDWF  2E,W
0258:  MOVWF  04
0259:  BCF    03.7
025A:  CLRF   00
025B:  MOVLW  2A
025C:  MOVWF  39
025D:  CALL   103
025E:  INCF   2E,F
025F:  BTFSC  08.5
0260:  GOTO   25F
....................         if(input(pin_d6)){delay_ms(20); sayac++; while(input(pin_d6));sorgu();} 
0261:  BTFSS  08.6
0262:  GOTO   37F
0263:  MOVLW  14
0264:  MOVWF  3A
0265:  CALL   04C
0266:  INCF   2E,F
0267:  BTFSC  08.6
0268:  GOTO   267
....................         output_low(pin_d3); 
*
037F:  BCF    08.3
0380:  GOTO   1A9
....................          
....................      } 
....................    
....................    } 
....................      
....................    output_low(pin_d3); 
0381:  BCF    08.3
0382:  BCF    0A.3
0383:  BCF    0A.4
0384:  GOTO   3C8 (RETURN)
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
.................... void main() 
0385:  MOVF   03,W
0386:  ANDLW  1F
0387:  MOVWF  03
0388:  CLRF   2E
0389:  CLRF   2F
038A:  CLRF   30
038B:  BSF    03.5
038C:  BSF    1F.0
038D:  BSF    1F.1
038E:  BSF    1F.2
038F:  BCF    1F.3
0390:  BCF    03.7
.................... { 
....................    setup_psp(PSP_DISABLED); 
*
03A5:  BSF    03.5
03A6:  BCF    09.4
....................    setup_adc_ports(NO_ANALOGS); 
03A7:  BSF    1F.0
03A8:  BSF    1F.1
03A9:  BSF    1F.2
03AA:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
03AB:  BCF    03.5
03AC:  BCF    1F.0
....................    setup_CCP1(CCP_OFF); 
03AD:  MOVLW  F0
03AE:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF); 
03AF:  ANDWF  1D,F
....................    setup_timer_1(T1_DISABLED); 
03B0:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
03B1:  MOVLW  00
03B2:  MOVWF  78
03B3:  MOVWF  12
03B4:  MOVLW  00
03B5:  BSF    03.5
03B6:  MOVWF  12
....................     
....................    set_tris_d(0xF0); 
03B7:  MOVLW  F0
03B8:  MOVWF  08
....................    set_tris_c(0x00); 
03B9:  MOVLW  00
03BA:  MOVWF  07
....................    set_tris_b(0x00); 
03BB:  MOVWF  06
....................    output_c(0x00); 
03BC:  BCF    03.5
03BD:  CLRF   07
....................    output_d(0x00); 
03BE:  CLRF   08
....................    lcd_init(); 
03BF:  GOTO   0B3
....................     
....................    lcd_putc("\fSifreyi girmek\nicin * basiniz!"); 
03C0:  MOVLW  3C
03C1:  BSF    03.6
03C2:  MOVWF  0D
03C3:  MOVLW  00
03C4:  MOVWF  0F
03C5:  BCF    03.6
03C6:  CALL   12F
....................    while(true) 
....................    { 
....................       tusKontrol(); 
03C7:  GOTO   19A
03C8:  GOTO   3C7
....................    } 
....................  
.................... } 
....................     
03C9:  SLEEP
....................     
....................  
....................  

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
